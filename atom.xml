<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[katsyoshiのめもみたいなもの]]></title>
  <link href="http://katsyoshi.github.io/atom.xml" rel="self"/>
  <link href="http://katsyoshi.github.io/"/>
  <updated>2015-02-22T18:45:59+09:00</updated>
  <id>http://katsyoshi.github.io/</id>
  <author>
    <name><![CDATA[katsyoshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blogの引越し]]></title>
    <link href="http://katsyoshi.github.io/blog/2015/02/22/mv-sakura-github-dot-io/"/>
    <updated>2015-02-22T18:29:09+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2015/02/22/mv-sakura-github-dot-io</id>
    <content type="html"><![CDATA[<p>自分でblogを管理するのがちょっとだけ面倒になってきたので、
このblogを<a href="katsyoshi.github.io">github.io</a>に移行した。</p>

<h2>手順</h2>

<p>github.com に <code>katsyoshi.github.io</code> というリポジトリを作成し、以下のコマンドを実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake setup_github_pages
</span><span class='line'><span class="nb">set </span>your github repogitory
</span><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>そのあと、DNSでCNAMEに <code>katsyoshi.github.io</code> を設定し、リポジトリのトップに <code>blog.katsyoshi.org</code> と書いた <code>CNAME</code> ファイルを追加しおわりです。</p>

<h2>おわり</h2>

<p>おわり</p>

<h3>参考サイト</h3>

<ol>
<li><a href="http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/">http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/</a></li>
<li><a href="http://blog.textfile.org/20141014/github/">http://blog.textfile.org/20141014/github/</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XDGの設定]]></title>
    <link href="http://katsyoshi.github.io/blog/2015/02/16/setting-xdg-open/"/>
    <updated>2015-02-16T18:03:16+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2015/02/16/setting-xdg-open</id>
    <content type="html"><![CDATA[<p>急に <code>xdg-open</code> でブラウザが開かなくなったのでメモ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>xdg-mime default google-chrome.desktop x-scheme-handler/http
</span><span class='line'><span class="nv">$ </span>xdg-mime default google-chrome.desktop x-scheme-handler/https
</span></code></pre></td></tr></table></div></figure>


<p>で設定できます。</p>

<h3>参考</h3>

<p>&lsquo;xdg-open&rsquo;, archlinux wiki, <a href="https://wiki.archlinux.org/index.php/xdg-open,">https://wiki.archlinux.org/index.php/xdg-open,</a> 2015/02/16</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[とりあえずibusやめてみた]]></title>
    <link href="http://katsyoshi.github.io/blog/2015/02/12/remove-ibus/"/>
    <updated>2015-02-12T07:10:29+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2015/02/12/remove-ibus</id>
    <content type="html"><![CDATA[<p><a href="https://www.google.co.jp/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#newwindow=1&amp;q=ibus1.5">ibus-1.5</a>からあまり評判がよろしくない(特に不満はない)ので、あたらしく<a href="https://code.google.com/p/fcitx/">fcitx</a>を導入してみた。</p>

<h2>前提条件</h2>

<p>ここでは<a href="http://www.gentoo.org">Gentoo/Linux</a>での導入方法について述べています。
日本語変換エンジンとしてMozcについて述べています。</p>

<h2>導入</h2>

<p>とりあえずfcitxをインストール、設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>emerge -av fcitx
</span><span class='line'>
</span><span class='line'><span class="nv">$ $EDITOR</span> .xinitrc
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">XMODIFIERS</span><span class="o">=</span>@im<span class="o">=</span><span class="s2">&quot;fcitx&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GTK_IM_MODULE</span><span class="o">=</span><span class="s2">&quot;fcitx&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">QT_IM_MODULE</span><span class="o">=</span><span class="s2">&quot;fcitx&quot;</span>
</span><span class='line'>fcitx
</span></code></pre></td></tr></table></div></figure>


<p>これでインストールはこれでおわりです。</p>

<h2>fcitxでmozc</h2>

<p>これは、<a href="http://gpo.zugaina.org/app-i18n/mozc">overlay</a>が提供されいているのでそれで導入します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ $EDITOR</span> /etc/portage/make.conf
</span><span class='line'><span class="nv">USE</span><span class="o">=</span><span class="s2">&quot;fcitx ${USE}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo emerge -av mozc
</span></code></pre></td></tr></table></div></figure>


<p>で、インストールすれば使えるようになります。</p>

<h2>おわり</h2>

<p><a href="http://anond.hatelabo.jp/20150210030728">こういうの</a>があったので、真面目にかこうかと思ったんですがどめんどうなので導入メモになりました。</p>

<p>あと引越ししたので贈っていただいてもいいんですよ？
<a href="http://www.amazon.co.jp/registry/wishlist/V0YZPO1OYFH5/">http://www.amazon.co.jp/registry/wishlist/V0YZPO1OYFH5/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rictyやめるってよ]]></title>
    <link href="http://katsyoshi.github.io/blog/2015/01/31/emacs-fonts/"/>
    <updated>2015-01-31T07:10:29+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2015/01/31/emacs-fonts</id>
    <content type="html"><![CDATA[<p>普段、emacs上でフォントを <code>Ricty</code> にして使ってたけど、微妙にずれるのを解消できなかったはなし</p>

<h2>症状と設定</h2>

<p>Rictyのときの症状と設定をのせておきます。</p>

<p style="text-align:center;"> <img src="http://katsyoshi.github.io/images/screenshot/Ricty.png" alt="Ricty" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">set-face-attribute</span> <span class="ss">&#39;default</span> <span class="nv">nil</span> <span class="nv">:family</span> <span class="s">&quot;Ricty&quot;</span> <span class="nv">:height</span> <span class="mi">135</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">set-fontset-font</span> <span class="p">(</span><span class="nf">frame-parameter</span> <span class="nv">nil</span> <span class="ss">&#39;font</span><span class="p">)</span> <span class="ss">&#39;japanese-jisx0208</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;Ricty&quot;</span> <span class="o">.</span> <span class="s">&quot;iso10646-1&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">setq</span> <span class="nv">face-font-rescale-alist</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;Ricty&quot;</span> <span class="o">.</span> <span class="mf">1.2</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>で解消できそうにないので DejaVu を用いて表示するように変更しました。</p>

<p style="text-align:center;"> <img src="http://katsyoshi.github.io/images/screenshot/DejaVu.png" alt="DejaVu" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">set-face-attribute</span> <span class="ss">&#39;default</span> <span class="nv">nil</span> <span class="nv">:family</span> <span class="s">&quot;DejaVu&quot;</span> <span class="nv">:height</span> <span class="mi">135</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じになりました。</p>

<h2>おわり</h2>

<p>よくわからないので諦めました。ので参考に</p>

<p>最後に引っ越ししました。</p>

<p><a href="http://www.amazon.co.jp/registry/wishlist/V0YZPO1OYFH5/">http://www.amazon.co.jp/registry/wishlist/V0YZPO1OYFH5/</a></p>

<h2>追記</h2>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/katsyoshi">@katsyoshi</a> (setq face-font-rescale-alist &#39;((&quot;Ricty&quot; . 1.0))) で常用していてずれないのですが、これだとどうなりますか?</p>&mdash; つまみ (@polamjag) <a href="https://twitter.com/polamjag/status/561875516118949889">February 1, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とアドバイスがありましたので、やってみました!!!!!!</p>

<p style="text-align:center;"> <img src="http://katsyoshi.github.io/images/screenshot/Ricty1.0.png" alt="Ricty-1.0" /></p>

<p>ほんとにちょっとずれて気になる…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start Rust by Example]]></title>
    <link href="http://katsyoshi.github.io/blog/2015/01/27/start-rust/"/>
    <updated>2015-01-27T07:10:29+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2015/01/27/start-rust</id>
    <content type="html"><![CDATA[<p>年ぁけたので、新しいプログラミング言語を覚えようと思い<a href="http://www.rust-lang.org">Rust Lang</a>を始めました。</p>

<p>チュートリアルとして<a href="http://rustbyexample.com">Rust bye Example</a>を<a href="https://github.com/katsyoshi/rustbyexamle">やっていって</a>ます。</p>

<h2>気が付いた点</h2>

<p>Rustという言語は変更が多いらしいのでここでは、Chap.1-14(2015/01/25時点)までで気がついた点で書きます。 まず、今回環境を下に示します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rustc --version
</span><span class='line'>rustc 1.0.0-nightly <span class="o">(</span>29bd9a06e 2015-01-20 23:03:09 +0000<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>i &ndash;> is</h3>

<p>まず、<a href="https://github.com/katsyoshi/rustbyexample/blob/master/2.FormattedPrint/FormattedPrint.rs#L9">Chap. 2のコード</a>で<code>integer</code>のsuffixが<code>is</code>に変更されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>FormattedPrint.rs:9:69: 9:71 warning: the <span class="sb">`</span>i<span class="sb">`</span> suffix on integers is deprecated; use <span class="sb">`</span>is<span class="sb">`</span> or one of the fixed-sized suffixes
</span><span class='line'>FormattedPrint.rs:9     println!<span class="o">(</span><span class="s2">&quot;{} of {:b} people know binary, the other half don&#39;t&quot;</span>, 1i, 2i<span class="o">)</span>;
</span><span class='line'>                                                                                        ^~
</span></code></pre></td></tr></table></div></figure>


<h3>range(a, b) –> (a..b)</h3>

<p>つぎに、<a href="https://github.com/katsyoshi/rustbyexample/blob/master/10.ForAndRange/ForAndRange.rs#L2">Chap. 10のコード</a>で<code>range(a, b)</code>がunstableになっているので<code>(a..b)</code>に変更しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ForAndRange.rs:2:14: 2:19 warning: use of unstable item: will be replaced by range notation, <span class="c">#[warn(unstable)] on by default</span>
</span><span class='line'>ForAndRange.rs:2     <span class="k">for </span>n in range<span class="o">(</span>1u32, 101<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                              ^~~~~
</span></code></pre></td></tr></table></div></figure>


<h2>おわり</h2>

<p>いま確認してたらそもそもRust by Example自体が変更されてた…</p>

<p>ちゃんちゃん</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on RailsでTypeScriptを使ってみる]]></title>
    <link href="http://katsyoshi.github.io/blog/2015/01/12/typescript-in-rails/"/>
    <updated>2015-01-12T11:41:25+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2015/01/12/typescript-in-rails</id>
    <content type="html"><![CDATA[<p>ふとRuby on RailsでTypeScriptを使いたくなったのでうごくようにしてみた。</p>

<h2>インストール</h2>

<p>これは簡単で <code>Gemfile</code> に <code>typescript-rails</code> を追加すればいけます。ですが、<a href="http://stackoverflow.com/questions/28117786/why-am-i-not-able-to-compile-a-file-that-references-jquery-d-ts">jQueryがTypeScript v1.4以上しかサポートしていないようなので</a>それに対応したものも追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;typescript-src&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;katsyoshi/typescript-src-ruby&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;typescript-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>インストールはこれだけでOKです。</p>

<h3>jQueryをつかう</h3>

<p>TypeScriptでjQueryを使う場合、TypeScriptの型定義ファイルをインストールする必要があります。
で、それを自力で作るのは大変なので、 <code>tsd</code> を利用してインストールします。</p>

<h4>tsd をインストール</h4>

<p><code>tsd</code> は <code>npm</code> でインストールできるので、それでインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install tsd -g
</span></code></pre></td></tr></table></div></figure>


<p>でインストールできたので、この <code>tsd</code> を利用してjQueryの型定義ファイルをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>tsd init
</span><span class='line'><span class="nv">$ $EDITOR</span> tsd.json
</span><span class='line'>  path: <span class="s2">&quot;app/assets/javascripts/typings&quot;</span>,
</span><span class='line'>  bundle: <span class="s2">&quot;app/assets/javascripts/typings/tsd.d.ts&quot;</span>
</span><span class='line'><span class="nv">$ </span>tsd query jquery -osa install
</span></code></pre></td></tr></table></div></figure>


<p>でjQueryを利用する準備は整いました。</p>

<h2>TypeScriptを書いてみよう</h2>

<p>コンソールに <code>hello, world!</code> を出すだけの例を示します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;hello, world!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>でいけますよ。
が <code>$('#hello').text('hoge');</code> いかねぇ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mikutter Advent Calendar 1日目]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/12/01/mikutter-advent-calendar-1-day/"/>
    <updated>2014-12-01T23:59:59+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/12/01/mikutter-advent-calendar-1-day</id>
    <content type="html"><![CDATA[<p><a href="http://www.adventar.org/calendar/401">一日目</a>らしいですね。</p>

<h2>今のmikutter環境</h2>

<p>はGentoo/Linuxで動いています。</p>

<p>よく考えてみたら今の環境になってLinuxでmikutterを使うのははじめてです。 Linuxになって一番感じたのインストールすごく楽になったことです。</p>

<h2>今までのmikutter環境</h2>

<p>今までMacで基本的に利用してたので苦労してた。 Macではとくにインストール、gemのupdateが大変でした。 Macでの環境では、HomebrewのGTK2のせいか、RubyGtk2がまともに動かないことが頻繁におこりました。 あと、最後まで解決できなかったのが特定の文字列がくるとクラッシュするというバグがありました。</p>

<h2>mikutterとの出会い</h2>

<p>出会いとしてはtwitterでTLを眺めてたら、@toshi_a って人がtwitterクライアントをつくってるらしいということで 取り敢えずFreeBSDでインストールしたのがはじめてだったとおもいます。 このときはFreeBSDでインストールして、X転送したものをMacで表示したとおもいます。</p>

<p>それ以降はMacでインストールして、<a href="http://github.com/katsyoshi/fav">mikutterのプラグイン</a>を書いて公開したりしてました。</p>

<h2>おわり</h2>

<p>おわりおわり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsで空のテストファイルを削除]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/11/21/remove-empty-example-files/"/>
    <updated>2014-11-21T16:07:38+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/11/21/remove-empty-example-files</id>
    <content type="html"><![CDATA[<p>Ruby on RailsのプロジェクトでGit管理されているTestで空のテストファイルを
削除するには以下のコマンドを利用することで削除できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git grep -e it --or -e specify -L -- spec/<span class="o">{</span>model,controller<span class="o">}</span>s | xgrep git rm -f --
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<ul>
<li><a href="https://www.kernel.org/pub/software/scm/git/docs/git-grep.html">man git grep</a></li>
<li><a href="http://qiita.com/tbaba/items/a67c8d79c6c4d0dc9b73">Git grepを便利に使う-eオプションについて</a></li>
<li><a href="http://qiita.com/rosylilly/items/9648ad2c8aa53465372b">複数人での Git 開発に便利な 3 つのコマンド</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mikutter Advent Calendar]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/11/04/mikutter-advent-calendar/"/>
    <updated>2014-11-04T23:13:40+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/11/04/mikutter-advent-calendar</id>
    <content type="html"><![CDATA[<p>寒くなりはじめましたね。今年も残すところあと二ヶ月ですね。
先日、浅草浅草寺で、Ingressおじさんに声かけられてイライラしてます。</p>

<p>そういうことで<a href="http://www.adventar.org/calendars/401">mikutterのAdventCalendar</a>を立てましたので参加してくだされ~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dockerではまってます]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/10/01/pitfall-in-docker/"/>
    <updated>2014-10-01T21:11:04+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/10/01/pitfall-in-docker</id>
    <content type="html"><![CDATA[<p>タイトルのとおりです。
Gentoo/LinuxでDockerが起動しないのでとりあえずメモ。</p>

<h2>インストール</h2>

<p>dockerの<a href="https://docs.docker.com/installation/gentoolinux/">Gentooインストールページ</a>を参考に<a href="https://github.com/tianon/docker-overlay">overlay</a>を導入します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo layman -a docker
</span><span class='line'><span class="nv">$ </span>sudo eix-sync
</span><span class='line'><span class="nv">$ </span>sudo emerge -av app-emulators/docker
</span></code></pre></td></tr></table></div></figure>


<p>ここでカーネルオプションの警告が出るのでひとつひとつ潰しておきます。</p>

<h2>起動</h2>

<p>インストールおわったら、起動させますが、以下のようなログが出てるので起動できません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>2014/10/01 18:39:17 docker daemon: 1.1.2 d84a070; execdriver: native; graphdriver:
</span><span class='line'><span class="o">[</span>6c541422<span class="o">]</span> +job serveapi<span class="o">(</span>unix:///var/run/docker.sock<span class="o">)</span>
</span><span class='line'><span class="o">[</span>6c541422<span class="o">]</span> +job initserver<span class="o">()</span>
</span><span class='line'><span class="o">[</span>6c541422.initserver<span class="o">()]</span> Creating server
</span><span class='line'><span class="o">[</span>6c541422<span class="o">]</span> +job init_networkdriver<span class="o">()</span>
</span><span class='line'><span class="o">[</span>6c541422.init_networkdriver<span class="o">()]</span> creating new bridge <span class="k">for </span>docker0
</span><span class='line'>package not installed
</span><span class='line'><span class="o">[</span>6c541422<span class="o">]</span> -job init_networkdriver<span class="o">()</span> <span class="o">=</span> ERR <span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>package not installed
</span><span class='line'><span class="o">[</span>6c541422<span class="o">]</span> -job initserver<span class="o">()</span> <span class="o">=</span> ERR <span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>2014/10/01 18:39:17 package not installed
</span></code></pre></td></tr></table></div></figure>


<p>このときは <code>bridge-utils</code> をインストールすればいいのかなと思ってたら、インストールしても解決できないです。</p>

<h2>おわり</h2>

<p>どなたか助けてくだされ〜</p>

<h2>追記</h2>

<p>再構築したカーネルをインストールしてなかったというオチでした。</p>

<p>ちゃんちゃん</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2014]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/09/22/rubykaigi2014/"/>
    <updated>2014-09-22T19:10:00+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/09/22/rubykaigi2014</id>
    <content type="html"><![CDATA[<p><a href="http://rubykaigi.org/2014">RubyKaigi2014</a>に行ってきました。
聞いたもの一覧です。</p>

<h2>1日目</h2>

<ul>
<li><a href="http://rubykaigi.org/2014/presentation/S-KoichiSasada">Building the Ruby interpreter &mdash; What is easy and what is difficult?</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-NarihiroNakamura">Symbol GC</a> <a href="http://www.slideshare.net/authorNari/symbol-gc">スライド</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-ReiOdaira">Eliminating Giant VM Lock in Ruby through Hardware Transactional Memory</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-SzuKaiHsu">Cores unleashed Part II: Introduction to GobiesVM (and Software Transactional Memory)</a> <a href="https://speakerdeck.com/brucehsu/core-unleashed-part-ii-introduction-to-gobiesvm-and-stm-at-rubykaigi-2014">スライド</a></li>
<li>Committers vs. the world</li>
</ul>


<p>初日は笹田さんのキーノートを聞いた。あとはなりさんのSymbolをGCする話、HTM、STMの話を聞いていた。
SymbolをGCする話はいままでGCされないことを知らなかったので便利かなと。
懇親会では、笹田さんと鳥井さんがペアルックだったので写真撮ったのですが、携帯のカメラアプリで保存できなかったのが心のこりです。</p>

<h2>2日目</h2>

<ul>
<li><a href="http://rubykaigi.org/2014/presentation/S-YukihiroMatzMatsumoto">Comming soon&hellip;</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-MasahiroIde">A Just in Time compiler for CRuby (CRuby言語処理系向けJITコンパイラ)</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-ThiagoScalone-DanielRodriguez">MRuby as Development Platform for Payments</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-TakehikoYOSHIDA">Open the door of embedded systems to IoT! mruby on LEGO Mindstorms EV3®</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-ShotaFukumori">Scalable deployments &ndash; How we deploy Rails app to 100+ hosts in a minute</a> <a href="https://speakerdeck.com/sorah/scalable-deployments-how-we-deploy-rails-app-to-150-plus-hosts-in-a-minute">スライド</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-MATSUMOTORyosuke">Resource Control Architecture scripting with mruby for a Web Server Separating Computer Resources Virtually at Each HTTP Request</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-MasahiroNakagawa">ServerEngine: a framework for multiprocess servers in Ruby</a> <a href="http://www.slideshare.net/treasure-data/rubykaigi-2014-serverengine">スライド</a></li>
<li><a href="http://rubykaigi.org/2014/LT">Ligthting Talks</a></li>
</ul>


<p>RubyをJIT使って速くしようという話。福盛さんのデプロイを早くするのは面白かった。どこで利用できるのって話はおいておいて。
松本(り)さんはこのtalkが切っ掛けで<a href="http://hb.matsumoto-r.jp/entry/2014/09/20/003531">就職決まった</a>ようです。LTも面白かったです。</p>

<h2>3日目</h2>

<ul>
<li><a href="http://rubykaigi.org/2014/presentation/S-JonanScheffler">Everything is Broken: A Story of Hope</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-NaotoshiSeo">Fluentd Hacking Guide (Fluentd ソースコード完全解説)</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-PremSichanugrist">The Ruby Challenge</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-MasatoshiSEKI">Make your own synchronization mechanism.</a></li>
<li><a href="http://rubykaigi.org/2014/presentation/S-KouheiSutou">Three Ruby usages &ndash; High-level interface, Glue and Embedding &ndash; Inside Droonga</a> <a href="http://speakerdeck.com/u/kou/p/three-ruby-usages">スライド</a></li>
</ul>


<p>3日目はゆっくり来てAaronとか聞こうかとおもってたけど、午前中はロビーでだらだらしすぎてなにもきいていないです。
午後から、Jonanは2011の最後のRubyKaigiのときに会ってたので今こういうことやってるのだなーと。
fluentdのプラグイン書いてるけど、なんとなく動いてるし、そのプラグインを利用してて特に問題なかったので、これがあってよかった。
RubyChallengeはコミッタでも間違えててむずかしい。
咳さんと須藤さんの話はすごくよかった。</p>

<h2>おわり</h2>

<p>RubyKaigi2014行ってきました。この3日間非常に楽しく過ごせました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なごや、ながのに行ってきた]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/09/15/went-to-nagoya-and-nagano/"/>
    <updated>2014-09-15T16:33:45+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/09/15/went-to-nagoya-and-nagano</id>
    <content type="html"><![CDATA[<p>友人が車で田舎に帰るということなので勢いで名古屋に連れてきてもらった。</p>

<p>土曜日の夜７時東京出発で夜９時半ころに三島に着き、三島の友人とカレー食べた。</p>

<p style="text-align:center;"> <img src="http://katsyoshi.github.io/images/photo/mishima-curry.png%20=%20512x" alt="カレー" /></p>

<p>泊まるとこ決めてないので名古屋まで連れてきてもらって、
ぷらぷらして泊まるところを探してた。
三連休の初日のためかネカフェがどこもいっぱいでしかたないので
カラオケで一泊。</p>

<p>が、実は寝れてなかったです。３０分ほど目を閉じてました。
ので、退出時間に退出し、名古屋駅６時１２分発の中津川行きに乗り込み、
中津川乗り換えの塩沢を目指しました。
ここではなにごともなく乗り換えることができました。
乗り換えたあとに目の前に座った女の子がかわいかったです。</p>

<p>電車の中で温泉宿に行こうと、募集したら神のようなかたが、</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/katsyoshi">@katsyoshi</a> このあたりからどうぞ。<a href="http://t.co/EEEEXKlTpE">http://t.co/EEEEXKlTpE</a></p>&mdash; 月白（I, bot）瑠璃 (@TsukishiroRuri) <a href="https://twitter.com/TsukishiroRuri/status/510889560532717568">September 13, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ということだったので、ここの二位だった、<a href="http://www.akanejyku.com">茜宿</a>に行くことにしました。</p>

<p>とはいえぶらりのーぷらんで塩尻に来ているので、どうやって行けばいいのか
わからないのです。出発前のコミュニティバスの運転手さんに話を聞いたりしたり、
また、タクシーの料金表があったので、それを見たら、片道4000円弱かかる
ことがわかったので、レンタカーを借りることにしました。
ペーパーの状態だったのに、この判断した俺は寝不足の勢いだけだったなと。</p>

<p>借りた車に乗ってすぐに向かうところでしたが、下着をもってきてないことを思いだしたので、
近くにスーパーマーケットらしきものを発見しすぐに行きました。
下着類を調達したのでいざ温泉へ。</p>

<p>温泉へはとくになにもなく無事に辿りつけました。
温泉では、入湯以外に昼食もとれるということで、昼食も一緒にとることにしました。
温泉自体は、眺めが非常によく、天気も大変よく、開放的な気分になりました。
&ndash;> <img src="http://katsyoshi.github.io/images/photo/gake-no-yu-akanejuku-nagame.png%20=%20512x" alt="崖の湯" /> &lt;&ndash;</p>

<p>温泉の温度がちょっと低かったのが残念かなという程度で、よかったです。
温泉あがってから昼食で、天ざるそばを食べたのですが、そばは美味しかったです。</p>

<p>温泉の後は、折角車があるのだし、まだ行ったことのない松本城に行くことにしました。
松本城は、石垣の改修中とさらに、三連休の中日ということもあり、入るのに1時間、
見学1時間という案内がでてたので、外から眺めるだけにしました。
観光はこれぐらいにして帰ることにしましたが、渋滞が多く結構時間がかかりました。
&ndash;> <img src="http://katsyoshi.github.io/images/photo/matsumoto-jo-casle-info.png%20=%20512x" alt="松本城" /> &lt;&ndash;</p>

<p>最後に八王子によって夕飯を食べ、ておくれたと思わせつつも無事帰りつくことができました~。
塩尻17時前出発して、21時前に八王子に到着しました。</p>

<p>ということで名古屋から新宿まで塩尻を経由して鈍行の中央線を走破しました。
おわり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentoo LinuxむけのJubatusパッケージ書いたよ]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/09/12/jubatus-in-gentoo/"/>
    <updated>2014-09-12T12:29:20+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/09/12/jubatus-in-gentoo</id>
    <content type="html"><![CDATA[<p><a href="http://katsyoshi.github.io/blog/2014/08/20/gentoo-install-battle-part-i/">PC</a>を<a href="http://katsyoshi.github.io/blog/2014/08/21/gentoo-install-battle-part-ii/">買い替えた</a>ので<a href="http://katsyoshi.github.io/blog/2014/08/31/gentoo-install-battle-part-iii/">環境構築</a>してます。
<a href="https://github.com/kazuki/overlay/tree/master/sci-calculators/jubatus">Jubatusのoverlay</a>があったのですが、古かったので新しく<a href="https://github.com/katsyoshi/overlay">Jubatusのoverlay</a>作成しました。</p>

<h2>インストール</h2>

<p>これは、以下のコマンドでインストールができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># curl https://raw.githubusercontent.com/katsyoshi/overlay/master/profiles/layman.xml &gt; /etc/layman/overlays/katsyoshi.xml</span>
</span><span class='line'><span class="c"># layman -f -a katsyoshi</span>
</span><span class='line'><span class="c"># eix-sync</span>
</span><span class='line'><span class="c"># emerge -av jubatus</span>
</span></code></pre></td></tr></table></div></figure>


<p>でいけるとおもいます。</p>

<h2>未実装</h2>

<ul>
<li>jubatus_coreのオプションがはたらいてない(ハズ)</li>
<li>jubatus_msgpack-rpcの依存パッケージにdev-libs/msgpackをいれていない</li>
<li>jubatusのオプションを確認していない</li>
</ul>


<p>などなどあるので、PRまってます。</p>

<h2>まとめ</h2>

<p><a href="https://github.com/kazuki/overlay/">よくみたら</a>必要なライブラリのパッケージもあったのでこれのバージョンとjubatus_core追加するだけでよかったかも。</p>

<p>ちゃんちゃん</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentoo Install Battle Part III]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/08/31/gentoo-install-battle-part-iii/"/>
    <updated>2014-08-31T10:47:14+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/08/31/gentoo-install-battle-part-iii</id>
    <content type="html"><![CDATA[<p>これ<a href="http://katsyoshi.github.io/blog/2014/08/20/gentoo-install-battle-part-i/">まで</a>の<a href="http://katsyoshi.github.io/blog/2014/08/21/gentoo-install-battle-part-ii/">流れ</a>で準備が整ったので、Installを始めます。</p>

<h2>インストール</h2>

<p>これは<a href="http://wiki.gentoo.org/">Gentoo Wiki</a>を見ながらで大丈夫です。</p>

<h3>嵌ったところ</h3>

<p>音が鳴らないという問題が発生しました。<a href="http://pocke.hatenablog.com/entry/2014/02/02/100636">理由</a>は簡単でしたのですぐに設定しました。</p>

<p>つぎにネットワークの設定をnetmountからNetworkManagerに変更しました。
設定は<a href="http://wiki.gentoo.org/wiki/NetworkManager">ここ</a>で行なえばよいです。</p>

<p>最後にibus-mozcをインストールして終りです。</p>

<h2>mikutter</h2>

<p>GentooInstallBattleはmikutterをインストールしてtweetすることなのでmikutterをインストールします。
ここではrbenvを利用してmikutterのインストールします。
まずはrbenvとruby-buildをインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</span></code></pre></td></tr></table></div></figure>


<p>つぎにrbenvの設定を行います。以下の設定を<code>~/.bashrc</code>あたりに追記してください</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>~/.rbenv/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rubyのインストールは<code>rbenv install 2.1.2</code>でインストールします。
最後にmikutterをダウンロードし、環境を構築します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/mikutter/mikutter.git ~/mikutter
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/mikutter
</span><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>ruby mikutter.rb
</span></code></pre></td></tr></table></div></figure>


<p>でインストール終了!!
これで快適なmikutterライフがておくれますね。</p>

<p><img src="http://katsyoshi.github.io/images/photo/mikutter.png" alt="mikutter" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentoo Install Battle Part II]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/08/21/gentoo-install-battle-part-ii/"/>
    <updated>2014-08-21T20:01:51+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/08/21/gentoo-install-battle-part-ii</id>
    <content type="html"><![CDATA[<p>X240の準備は終ったので、<a href="http://wiki.gentoo.org/wiki/Quick_install_guide">インストール</a>します。基本的にはこの流れです。</p>

<h2>USBブート</h2>

<p><a href="http://katsyoshi.github.io/blog/2014/08/20/gentoo-install-battle-part-i/">作成したUSBメモリ</a>をX240に差して起動します。
起動したら、まずパーティションの設定を行います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gpart /dev/sda
</span></code></pre></td></tr></table></div></figure>


<p>で不要なパーティションを削除し、必要なパーティションを作成します。</p>

<h2>無線LAN</h2>

<p>ネットワークを接続しますが、今回は無線LANを利用してインストールを行います。</p>

<p>まず、どこか適当な位置に<a href="http://www.xmisao.com/2014/01/16/how-to-connect-wpa2-wireless-lan-using-wpa-supplicant.html">リンク先</a>のファイルを作成してください。</p>

<p>次に以下のコマンドを実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wpa_supplicant -Dnl80211 -ieth0 -c/path/to/supplicant.config
</span></code></pre></td></tr></table></div></figure>


<p>実行したら、接続されているのでATL + F2とかでコンソールの表示を変更してください。</p>

<h2>おわり</h2>

<p>有線のLANケーブルがなかったからはまった。
続きは明日以降に…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentoo Install Battle Part I]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/08/20/gentoo-install-battle-part-i/"/>
    <updated>2014-08-20T23:48:45+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/08/20/gentoo-install-battle-part-i</id>
    <content type="html"><![CDATA[<p>ここにThinkPad X240があります。これの中身を Gentoo/Linux にします。</p>

<h2>準備</h2>

<p>準備として、Gentoo/LinuxのLiveCDを作成、Bootの設定を行います。</p>

<h3>イメージ作成</h3>

<p>まずLiveCDイメージをダウンロードしUSBフラッシュメモリにコピーします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wget ftp://ftp.iij.ad.jp/pub/linux/gentoo/releases/amd64/autobuilds/current-iso/install-amd64-minimal-20140814.iso
</span><span class='line'><span class="nv">$ </span>dd <span class="nv">of</span><span class="o">=</span>/path/to/disk <span class="k">if</span><span class="o">=</span>install-amd64-minimal-20140814.iso <span class="nv">bs</span><span class="o">=</span>4m
</span></code></pre></td></tr></table></div></figure>


<p>でイメージの作成終了です。
次に、X240の設定を行います。</p>

<h3>X240の起動準備</h3>

<p>Windowsを起動し、Shift押しながら再起動します。
再起動したら、以下の順番でBIOSを起動させます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>トラブルシューティング -&gt; 詳細オプション -&gt; UEFIファームウェアの設定 -&gt; 再起動
</span></code></pre></td></tr></table></div></figure>


<p>でBIOSがたちあがるので、Secure BootとUEFI BootとBoot順の設定を変更します。</p>

<p>Seucre Bootでは<code>Securety -&gt; Secure Boot -&gt; Secure Boot [Enable]</code>を<code>[Disable]</code>に変更</p>

<p>UEFI Bootでは<code>Startup -&gt; UEFI/Legacy Boot [UEFI only]</code>を<code>[Both]</code>に変更</p>

<p>Boot順の設定では、<code>Startup -&gt; Boot</code>でBootさせたい順番に変更</p>

<p>BIOSを変更したらRestartします。</p>

<h2>まとめ</h2>

<p>とりあえず今日はここで終りです。インストールは明日以降にします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good-bye Elasticsearch and Jenkins]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/08/10/good-bye-elasticsearch-and-jenkins/"/>
    <updated>2014-08-10T23:22:55+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/08/10/good-bye-elasticsearch-and-jenkins</id>
    <content type="html"><![CDATA[<p>この環境では慢性的にメモリが足りなかったのでメモリを大量に使ってる<a href="http://www.elasticsearch.org/">Elasticsearch</a>を削除しました。
Jenkinsについては利用していなかったので停止してます。ついでに12.04から14.04にupgradeしました。</p>

<h2>削除とUpgrade</h2>

<p>削除する前に<a href="https://mackerel.io">Mackerel</a>を導入したので、fluentd + Elasticsearch + Kibanaな構成にする必要がなくなりました。
Elasticsearchの削除とJenkinsの停止は以下のコマンドで行ないます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get purge elasticsearch
</span><span class='line'><span class="nv">$ </span>sudo update-rc.d jenkins disable
</span></code></pre></td></tr></table></div></figure>


<p>つぎに14.04へupgradeを行ないます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo <span class="k">do</span>-release-upgrade -d
</span></code></pre></td></tr></table></div></figure>


<p>これで14.04になってます。</p>

<h2>環境</h2>

<ul>
<li>Machine: さくらVPS</li>
<li>CPU: Intel Xeon E312xx (SandyBridge) * 2</li>
<li>MEM: 1GB</li>
<li>HDD: 100GB</li>
<li>OS: Ubuntu Linux 12.04</li>
</ul>


<h2>インストール済ソフトウェア（一部）</h2>

<ul>
<li>Elasticsearch</li>
<li>fluentd</li>
<li>Jenkins</li>
<li>Jubatus</li>
<li>Norikra</li>
<li>Nginx</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[秘境でハッカソンがあったので行ってきた]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/07/22/akiyamago-hackathon-2014/"/>
    <updated>2014-07-22T20:09:11+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/07/22/akiyamago-hackathon-2014</id>
    <content type="html"><![CDATA[<p>7月19日〜7月21日まで秋山郷の<a href="https://www.google.co.jp/maps/place/%E3%81%8B%E3%81%9F%E3%81%8F%E3%82%8A%E3%81%AE%E5%AE%BF/@36.9184265,138.6375958,18z/data=!4m2!3m1!1s0x0:0xec3b9141469e30fc">かたくりの宿</a>という場所でHackathonがあったので行ってきました。</p>

<h2>1日目</h2>

<p>1日目は仕事があったので仕事を終えてから新幹線で越後湯沢まで出て、<a href="https://twitter.com/m_asama">@m_asama</a>さんと合流して秋山郷へ。</p>

<p>途中、最短経路が<a href="http://www.city.tokamachi.lg.jp/page/10040200057.html">土砂に埋もれて</a>通行できないので<a href="http://www.pref.niigata.lg.jp/tokamachi_seibi/1356771341657.html">迂回</a>して行きました。途中の道は狹く、えっここ通るの？って感じの道を通りました。宿に着いたらもう午後6時ですぐに食事の時間となりました。</p>

<p>夕飯は山菜づくしな夕飯でした。</p>

<p>夕飯終ってハックタイムでしたが、食堂を利用する予定だったので、食堂が空くまで部屋でだべってました。
午後9時頃からハックタイムが始まりました。その日はとても眠かったので<a href="https://twitter.com/kotatsu_mi">@kotatu_mi</a>に絡んですぐに寝ました。</p>

<h2>2日目</h2>

<p>2日目は宿の人に起こされて起きました。朝食はこんなかんじでした。</p>

<p><img src="http://katsyoshi.github.io/images/photo/akiyamago-2breakfast.png%20=%20256x" alt="二日目朝食" /></p>

<p>朝食後、<a href="https://www.google.co.jp/maps/place/%E8%A6%8B%E5%80%89%E6%A9%8B/@36.91872,138.637115,17z/data=!3m1!4b1!4m2!3m1!1s0x5ff601b97e1ba7bb:0x1577cfb29a624fa7">近くの橋</a>まで散歩しました。軽い散歩だと思ってたら、山道で辛かった。</p>

<p><img src="http://katsyoshi.github.io/images/photo/akiyamago-mikura-hashi.png%20=%20256x" alt="見倉橋" /></p>

<p>そのまま帰るのはもったいないと思って反対側を登りました。登りきったら、近くにcool wind holeがあるらしいのでそこまで行ってみました。</p>

<p><img src="http://katsyoshi.github.io/images/photo/akiyamago-cool-wind-hole.png%20=%20256x" alt="風穴" /></p>

<p>帰りは山道がつらいしつかれたので、周って帰りました。</p>

<p>昼飯は<a href="https://www.google.co.jp/maps/place/%E6%A5%BD%E9%A4%8A%E9%A4%A8/@36.9179309,138.6369755,13z/data=!4m5!1m2!2m1!1z5bCP6LWk5rKi!3m1!1s0x601dff32c6304d99:0xaacce4d76fa870ff">小赤沢</a>まで温泉と熊らーめんを食べました。</p>

<p><img src="http://katsyoshi.github.io/images/photo/akiyamago-kuma-ramen.png%20=%20256x" alt="熊らーめん" /></p>

<p>宿に戻ってからはしばらくはハックタイムでした。夕食後、星を見に外出たらすごく星が綺麗でした。</p>

<p><img src="http://katsyoshi.github.io/images/photo/akiyamago-milkyway.png%20=%20%20256x" alt="星きれい" /></p>

<p>星見に行ったあとにハックタイムがあり、<a href="https://github.com/katsyoshi/mikutter-docker">mikutterでDockerのコントロール</a>をしようとしてました。</p>

<h2>3日目</h2>

<p>午前中は夜の続きをやってました。</p>

<p>帰りは<a href="https://www.google.co.jp/maps/place/%E5%88%87%E6%98%8E%E6%B8%A9%E6%B3%89/@36.8097569,138.6200903,18z/data=!4m7!1m4!3m3!1s0x601dff32c6304d99:0xaacce4d76fa870ff!2z5qW96aSK6aSo!3b1!3m1!1s0x0:0x30280b0e98e9ad4a">切明温泉</a>にたちより、長野回りで帰りました。</p>

<h2>今回の成果</h2>

<p><a href="https://www.google.co.jp/search?q=%E6%88%90%E6%9E%9C%E4%BD%95%E3%82%82%E3%81%82%E3%82%8A%E3%81%BE%E3%81%9B%E3%82%93%E3%81%A7%E3%81%97%E3%81%9F%E3%83%BC&amp;newwindow=1&amp;espv=2&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=gmjOU9KXOcne8AXRl4KYCg&amp;ved=0CAYQ_AUoAQ&amp;biw=1166&amp;bih=986#facrc=_&amp;imgdii=_&amp;imgrc=tETgdA-yYjU4tM%253A%3BqWbTS9xBjlMpPM%3Bhttp%253A%252F%252Ftubagra.com%252Ftbg-wp%252Fwp-content%252Fuploads%252F2013%252F06%252F0213.jpg%3Bhttp%253A%252F%252Ftubagra.com%252F16457%252F%3B600%3B490">成果</a>です</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPDYをさくっと動かしてみた]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/06/26/use-spdy-in-nginx/"/>
    <updated>2014-06-26T13:59:19+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/06/26/use-spdy-in-nginx</id>
    <content type="html"><![CDATA[<p>NGINXでSPDY3.1が<a href="http://nginx.org/en/docs/http/ngx_http_spdy_module.html">サポートされている</a>ようなので動かしてみた。</p>

<h2>準備</h2>

<p>SPDYは<a href="http://ja.wikipedia.org/wiki/SPDY#.E6.A6.82.E8.A6.81">SSL必須</a>のようなのでとりあえずOpenSSLで<a href="http://dogmap.jp/2011/05/10/nginx-ssl/">野良証明書を作成</a>します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/cert/dir
</span><span class='line'><span class="nv">$ </span>openssl genrsa -des3 -out server.key 2048
</span><span class='line'><span class="nv">$ </span>openssl req -new -key server.key -out server.csr
</span><span class='line'><span class="nv">$ </span>openssl rsa -in server.key.org -out server.key
</span><span class='line'><span class="nv">$ </span>openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
</span></code></pre></td></tr></table></div></figure>


<h2>NGINXの設定</h2>

<p>とりあえずNGINXの<a href="http://nginx.org/en/docs/http/ngx_http_spdy_module.html">設定ファイルを作成</a>します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>server <span class="o">{</span>
</span><span class='line'>    listen 443 ssl spdy;
</span><span class='line'>    ssl_certificate server.crt;
</span><span class='line'>    ssl_certificate_key server.key;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と設定したらNGINXを再起動します。
これでSPDYで動いてます。わいわい。</p>

<p><img src="http://katsyoshi.github.io/images/photo/spdy.png" alt="SPDY" /></p>

<p>オレオレ証明書なのでそのうちちゃんとした証明書を使いたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[野良Gitサーバにuploadできなかった話]]></title>
    <link href="http://katsyoshi.github.io/blog/2014/06/22/fail-git-uploading/"/>
    <updated>2014-06-22T22:38:20+09:00</updated>
    <id>http://katsyoshi.github.io/blog/2014/06/22/fail-git-uploading</id>
    <content type="html"><![CDATA[<p>今日もろくでもない理由で嵌った。</p>

<h2>嵌った理由</h2>

<p>野良Gitサーバを立てているのでそこに新しいリポジトリを作成した。</p>

<p>で、リモートを追加し、ブランチを追加しようとすると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add master ssh://myhost/my_project.git
</span><span class='line'>$ git push origin master -f
</span><span class='line'>error: src refspec master does not match any.
</span><span class='line'>error: failed to push some refs to 'ssh://myhost/my_project.git'</span></code></pre></td></tr></table></div></figure>


<p>というようなエラーが出てきてアップロードできなかった。
そのため理由を探ってたら<a href="http://d.hatena.ne.jp/nishiohirokazu/20110304/1299229916">同じ理由</a>があった。</p>

<p>そこで <code>git log</code> としたら何もでてこなかったので</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m 'first commit'
</span><span class='line'>$ git push -u origin master</span></code></pre></td></tr></table></div></figure>


<p>リモートリポジトリに追加できました。
ちゃんちゃん</p>
]]></content>
  </entry>
  
</feed>
